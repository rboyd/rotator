package {  import com.greensock.*;  import flash.display.MovieClip;  import flash.display.Sprite;  import flash.display.DisplayObject;  import flash.text.TextField;  import flash.text.TextFormat;  import flash.events.MouseEvent;  import flash.events.TimerEvent;  import flash.events.EventDispatcher;  import flash.utils.Timer;  [Event(name="skippedToBanner", type="RotatorEvent")]  [Event(name="rotationPaused", type="RotatorEvent")]  [Event(name="rotationResumed", type="RotatorEvent")]  public class RotatorControl extends MovieClip {    protected var numBanners:int, ht:int, wt:int;	protected var selectors:Array;	protected var selector:DisplayObject;        public function RotatorControl(numBanners:int, wt:int, ht:int) {      super();      this.numBanners = numBanners;      this.ht = ht;      this.wt = wt;	  selectors = new Array();      setupControls();    }    	protected var rotatorPaused:Boolean = false;		protected var LEFT_MARGIN:Number = 2;	protected var btnPause:MovieClip;    protected function setupControls() {      var LEFT_SPACER = 10;      var SELECTOR_WIDTH = 20;            while(numChildren)      {        removeChildAt(0);      }      // background rectangle      var target2:Sprite = new Sprite();      target2.graphics.beginFill(0x333333);      target2.graphics.drawRect(0, 0, wt, ht);      target2.graphics.endFill();      target2.alpha = .5;      addChild(target2);      // active rectangle (selector)      var target3:Sprite = new Sprite();      target3.graphics.beginFill(0xAAAAAA);      target3.graphics.drawRect(0, 0, 20, 20);      target3.graphics.endFill();      target3.alpha = .75;      addChild(target3);	  selector = target3;            for (var curBanner:int = 1; curBanner <= numBanners; curBanner++) {        // add a button for each banner        var tf:TextField = new TextField();        tf.text = String(curBanner);        tf.textColor = 0xFFFFFF;		tf.selectable = false;		tf.addEventListener(MouseEvent.CLICK, onNumberClick);		tf.width = 20;                var format1:TextFormat = new TextFormat();        format1.font = "Helvetica";        format1.size = 20;                tf.setTextFormat(format1);                tf.x = (LEFT_SPACER + SELECTOR_WIDTH) * curBanner;        tf.y = (ht / 2) - (tf.textHeight / 2);		        addChild(tf);		selectors.push(tf);              }		target3.x = selectors[0].x - LEFT_MARGIN;        target3.y = selectors[0].y;				btnPause = new PauseButton();		btnPause.x = this.width * .95;		btnPause.y = this.y + btnPause.height - 2;		btnPause.addEventListener(MouseEvent.CLICK, onPauseClick);		btnPause.alpha = 0.4;		rotatorPaused = false;		addChild(btnPause);		    }	protected var SLIDE_SPEED:Number = .5;	protected function onNumberClick(me:MouseEvent) {		timer.reset();		var slideNum:int = int(me.target.text);		transitionTo(slideNum);				if (!rotatorPaused) {			timer.start();		}	}		[Bindable]	public var activeSlide:int = 1;		protected function transitionTo(slideNum:Number) {		activeSlide = slideNum;		dispatchEvent(new RotatorEvent(RotatorEvent.SLIDE_TRANSITION));		var targetX:Number = selectors[slideNum-1].x - LEFT_MARGIN;		new TweenLite(selector, SLIDE_SPEED, {x: targetX});	}		protected var timer:Timer;	public function startPlayback(displayTime:Number) {		timer = new Timer(displayTime, 0);		timer.addEventListener(TimerEvent.TIMER, onTimerExpired);		timer.start();	}		protected function onTimerExpired(e:TimerEvent) {		var newSlide:Number = (activeSlide % numBanners) + 1;		transitionTo(newSlide);	}		protected function onPauseClick(e:MouseEvent) {		rotatorPaused = !rotatorPaused;		if (rotatorPaused) {			btnPause.alpha = 1;			timer.reset();		} else {			btnPause.alpha = 0.4;			timer.start();		}			}  }}